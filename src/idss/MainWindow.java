/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package idss;

import java.awt.Color;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Time;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Andrew
 */
public class MainWindow extends javax.swing.JFrame {

    MapInfo map;
    ArrayList<MapObject> routeWithBestTime = new ArrayList<>();
	ArrayList<MapObject> routeWithBestDist = new ArrayList<>();
	ArrayList<MapObject> routeWithBestFuelCons = new ArrayList<>();
    ArrayList<Point> selectedPionts = new ArrayList<>(); 
	
    //Timer timer = new Timer();
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {    
        /*
        Crossroad3 cr1 = new Crossroad3(250, 100);
        Crossroad3 cr2 = new Crossroad3(50, 200);
        Crossroad3 cr3 = new Crossroad3(100, 250);
        JunctionPoint jp1 = new JunctionPoint(200, 50);
        JunctionPoint jp2 = new JunctionPoint(250,250);
        EndPoint ep = new EndPoint(100, 300);
        points.add(cr1);
        points.add(cr2);
        points.add(cr3);
        points.add(jp1);
        points.add(jp2);
        points.add(ep);
        Road r = new Road(cr1, cr2, true, 2, 1);
        cr1.setR2(r);
        cr2.setR2(r);
        roads.add(r);
        r = new Road(cr1, jp1, true, 2, 1);
        cr1.setR3(r);
        jp1.setR1(r);
        roads.add(r);
        r = new Road(cr1, jp2, true, 2, 1);
        cr1.setR1(r);
        jp2.setR1(r);
        roads.add(r);
        r = new Road(cr2, jp1, true, 2, 1);
        cr2.setR1(r);
        jp1.setR2(r);
        roads.add(r);
        r = new Road(cr2, cr3, true, 2, 1);
        cr2.setR3(r);
        cr3.setR3(r);
        roads.add(r);
        r = new Road(jp2, cr3, true, 2, 1);
        jp2.setR2(r);
        cr3.setR1(r);
        roads.add(r);
        r = new Road(ep, cr3, true, 2, 1);
        ep.setR1(r);
        cr3.setR2(r);
        roads.add(r);
        */

        initComponents();
        
        map = new MapInfo();
        mapPanel.setMapInfo(map);
        /*try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        try {
            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/idss", "idss", "idss");
            map.loadFromDB(conn);
        } catch (SQLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*Point p1 = new Point(250, 100);
        Point p2 = new Point(50, 200);
        Point p3 = new Point(100, 250);
        Point p4 = new Point(200, 50);
        Point p5 = new Point(250, 250);
        Point p6 = new Point(100, 300);
        map.points.add(p1);
        map.points.add(p2);
        map.points.add(p3);
        map.points.add(p4);
        map.points.add(p5);
        map.points.add(p6);
        map.roads.add(new Road(p1, p2, true, 2, 1));
        map.roads.add(new Road(p1, p4, true, 2, 1));
        map.roads.add(new Road(p1, p5, true, 2, 1));
        map.roads.add(new Road(p2, p4, true, 2, 1));
        map.roads.add(new Road(p2, p3, true, 2, 1));
        map.roads.add(new Road(p5, p3, true, 2, 1));
        map.roads.add(new Road(p6, p3, true, 2, 1));
        
        Car car = new Car();
        car.setMaxSpeed(80);
        
        ArrayList<MapObject> path = map.findBestRoute(p1, p6, null, car);
        for (MapObject mo : path) {
            mo.setSelected(true);
        }
        map.path = path;*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapPanel = new idss.MapPanel();
        jPanel1 = new javax.swing.JPanel();
        calcRoute = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        routeSelectList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        mapPanel.setMinimumSize(new java.awt.Dimension(400, 400));
        mapPanel.setPreferredSize(new java.awt.Dimension(581, 400));
        mapPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mapPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 578, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(mapPanel);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        calcRoute.setText("Calculate route");
        calcRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcRouteActionPerformed(evt);
            }
        });
        jPanel1.add(calcRoute);

        routeSelectList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Route with best time (red)", "Route with best dist (blue)", "Route with best fuel consumption (green)" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        routeSelectList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                routeSelectListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(routeSelectList);

        jPanel1.add(jScrollPane1);

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void markRoute(ArrayList<MapObject> path, int type) {
        if (path != null) {
			for (MapObject mo : path) {
				mo.setSelected(type);
			}
		}
	}
	
	private void clearRoute(ArrayList<MapObject> path) {
        if (path != null) {
			markRoute(path, 0);
			path.clear();
			path = null;
		}
	}
	
    private void calcRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcRouteActionPerformed
        clearRoute(routeWithBestTime);
        clearRoute(routeWithBestDist);
        clearRoute(routeWithBestFuelCons);		
		
		if (selectedPionts.isEmpty())
			return;
		
        Car car = new Car();
        car.setMaxSpeed(22.22); //m/s = 80 km/h
        car.setFuelCons(8/1000);
        car.setFuelConsLight(30 * car.getFuelCons());
        
        //int from = (int)jSpinner1.getValue()-1;
        //int to = (int)jSpinner2.getValue()-1;
        
		Point from, to = selectedPionts.get(0);
		for (int i=1; i<selectedPionts.size(); i++) {
			from = to;
			to = selectedPionts.get(i);
			routeWithBestTime.addAll(map.findRouteWithBestTime(from, to, null, car));
			routeWithBestDist.addAll(map.findRouteWithBestDist(from, to));
			routeWithBestFuelCons.addAll(map.findRouteWithBestFuelCons(from, to, null, car));
		}
			
        markRoute(routeWithBestTime, 1);
        markRoute(routeWithBestDist, 2);
        markRoute(routeWithBestFuelCons, 3);		
        
        repaint();
    }//GEN-LAST:event_calcRouteActionPerformed

    private void mapPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanelMousePressed
        Point point = (Point)mapPanel.getObjectAt(evt.getX(), evt.getY());
		if (point != null) {
			if (evt.getButton() == MouseEvent.BUTTON1) {
				selectedPionts.add(point);
				point.setColor(Color.BLUE);
			}else{
				selectedPionts.remove(point);
				point.setColor(null);
			}
	        repaint();
		}
    }//GEN-LAST:event_mapPanelMousePressed

    private void routeSelectListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_routeSelectListValueChanged
        switch (routeSelectList.getSelectedIndex()) {
			case 0: markRoute(routeWithBestTime, 1); break;
			case 1: markRoute(routeWithBestDist, 2); break;
			case 2: markRoute(routeWithBestFuelCons, 3); break;
		}
        repaint();
    }//GEN-LAST:event_routeSelectListValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calcRoute;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private idss.MapPanel mapPanel;
    private javax.swing.JList routeSelectList;
    // End of variables declaration//GEN-END:variables

}
